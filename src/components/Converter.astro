---
// Component imports
---

<div class="converter-wrapper" id="converter">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- JSON Input -->
    <div class="flex flex-col">
      <div class="flex items-center justify-between mb-2">
        <label for="json-input" class="text-sm font-semibold text-gray-700 dark:text-gray-300">
          JSON
        </label>
        <div class="flex gap-2">
          <button
            id="json-to-toon-btn"
            class="px-3 py-1.5 bg-blue-600 dark:bg-blue-700 text-white rounded-md text-sm font-medium hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors"
          >
            → TOON
          </button>
          <button
            id="json-format-btn"
            class="px-3 py-1.5 bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md text-sm font-medium hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors"
          >
            Format
          </button>
          <button
            id="json-copy-btn"
            class="px-3 py-1.5 bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md text-sm font-medium hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors"
          >
            Copy
          </button>
          <button
            id="json-clear-btn"
            class="px-3 py-1.5 bg-red-200 dark:bg-red-900/50 text-red-700 dark:text-red-400 rounded-md text-sm font-medium hover:bg-red-300 dark:hover:bg-red-900 transition-colors"
          >
            Clear
          </button>
        </div>
      </div>
      <textarea
        id="json-input"
        class="w-full h-96 p-4 border border-gray-300 dark:border-gray-600 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500"
        placeholder='Example: {"users": [{"id": 1, "name": "Alice", "role": "admin"}]}'
      ></textarea>
      <div id="json-error" class="mt-2 text-sm text-red-600 dark:text-red-400 hidden"></div>
    </div>

    <!-- TOON Output -->
    <div class="flex flex-col">
      <div class="flex items-center justify-between mb-2">
        <div class="flex items-center gap-3">
          <label for="toon-output" class="text-sm font-semibold text-gray-700 dark:text-gray-300">
            TOON
          </label>
          <div id="token-comparison-mini" class="hidden text-xs">
            <div class="flex items-center gap-2 px-2 py-1 bg-gray-50 dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700">
              <span class="text-gray-500 dark:text-gray-400">Tokens:</span>
              <span id="json-tokens-mini" class="text-blue-600 dark:text-blue-400 font-semibold">0</span>
              <span class="text-gray-400 dark:text-gray-500">→</span>
              <span id="toon-tokens-mini" class="text-green-600 dark:text-green-400 font-semibold">0</span>
              <span class="text-emerald-600 dark:text-emerald-400 font-semibold ml-1" id="savings-mini">(-0%)</span>
            </div>
          </div>
        </div>
        <div class="flex gap-2">
          <button
            id="toon-to-json-btn"
            class="px-3 py-1.5 bg-green-600 dark:bg-green-700 text-white rounded-md text-sm font-medium hover:bg-green-700 dark:hover:bg-green-600 transition-colors"
          >
            → JSON
          </button>
          <button
            id="toon-copy-btn"
            class="px-3 py-1.5 bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md text-sm font-medium hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors"
          >
            Copy
          </button>
          <button
            id="toon-clear-btn"
            class="px-3 py-1.5 bg-red-200 dark:bg-red-900/50 text-red-700 dark:text-red-400 rounded-md text-sm font-medium hover:bg-red-300 dark:hover:bg-red-900 transition-colors"
          >
            Clear
          </button>
        </div>
      </div>
      <textarea
        id="toon-output"
        class="w-full h-96 p-4 border border-gray-300 dark:border-gray-600 rounded-lg font-mono text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500 resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500"
        placeholder="The TOON result will appear here..."
      ></textarea>
      <div id="toon-error" class="mt-2 text-sm text-red-600 dark:text-red-400 hidden"></div>
    </div>
  </div>

  <!-- Options -->
  <div class="mt-6 p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
    <h3 class="text-sm font-semibold text-gray-700 dark:text-gray-300 mb-3">Conversion Options</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div>
        <label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Delimiter</label>
        <select
          id="delimiter-select"
          class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
        >
          <option value=",">Comma (,)</option>
          <option value="\t">Tab</option>
          <option value="|">Pipe (|)</option>
        </select>
      </div>
      <div>
        <label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Indentation</label>
        <input
          type="number"
          id="indent-input"
          value="2"
          min="1"
          max="4"
          class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
        />
      </div>
      <div class="flex items-end">
        <label class="flex items-center cursor-pointer">
          <input
            type="checkbox"
            id="length-marker-checkbox"
            class="mr-2 accent-blue-600"
          />
          <span class="text-xs text-gray-600 dark:text-gray-400">Length Marker (#)</span>
        </label>
      </div>
    </div>
  </div>
</div>

<script>
  import { jsonToToon, toonToJson } from '../lib/converter';
  import { compareTokens } from '../lib/tokenizer';

  const jsonInput = document.getElementById('json-input') as HTMLTextAreaElement;
  const toonOutput = document.getElementById('toon-output') as HTMLTextAreaElement;
  const jsonError = document.getElementById('json-error');
  const toonError = document.getElementById('toon-error');
  const delimiterSelect = document.getElementById('delimiter-select') as HTMLSelectElement;
  const indentInput = document.getElementById('indent-input') as HTMLInputElement;
  const lengthMarkerCheckbox = document.getElementById('length-marker-checkbox') as HTMLInputElement;
  const tokenComparisonMini = document.getElementById('token-comparison-mini');
  const jsonTokensMini = document.getElementById('json-tokens-mini');
  const toonTokensMini = document.getElementById('toon-tokens-mini');
  const savingsMini = document.getElementById('savings-mini');

  function hideError(element: HTMLElement) {
    element.classList.add('hidden');
    element.textContent = '';
  }

  function showError(element: HTMLElement, message: string) {
    element.textContent = message;
    element.classList.remove('hidden');
  }

  function convertJsonToToon() {
    hideError(jsonError!);
    hideError(toonError!);

    const jsonText = jsonInput.value.trim();
    if (!jsonText) {
      showError(jsonError!, 'Please enter a valid JSON');
      return;
    }

    try {
      const jsonData = JSON.parse(jsonText);
      const delimiter = delimiterSelect.value === '\\t' ? '\t' : delimiterSelect.value;
      const indent = parseInt(indentInput.value, 10) || 2;
      const lengthMarker = lengthMarkerCheckbox.checked ? '#' as const : false;

      const toonText = jsonToToon(jsonData, {
        delimiter: delimiter as ',' | '\t' | '|',
        indent,
        lengthMarker: lengthMarker || false,
      });

      toonOutput.value = toonText;
      
      // Update token comparison
      updateTokenComparison(jsonText, toonText);
    } catch (error) {
      showError(jsonError!, `Error converting: ${error instanceof Error ? error.message : 'Invalid JSON'}`);
      toonOutput.value = '';
      hideTokenComparison();
    }
  }

  function convertToonToJson() {
    hideError(jsonError!);
    hideError(toonError!);

    const toonText = toonOutput.value.trim();
    if (!toonText) {
      showError(toonError!, 'Please enter a valid TOON');
      return;
    }

    try {
      const indent = parseInt(indentInput.value, 10) || 2;
      const jsonData = toonToJson(toonText, {
        indent,
        strict: true,
      });

      const formattedJson = JSON.stringify(jsonData, null, 2);
      jsonInput.value = formattedJson;
      
      // Update token comparison
      updateTokenComparison(formattedJson, toonText);
    } catch (error) {
      showError(toonError!, `Error converting: ${error instanceof Error ? error.message : 'Invalid TOON'}`);
      hideTokenComparison();
    }
  }

  function formatJson() {
    hideError(jsonError!);

    const jsonText = jsonInput.value.trim();
    if (!jsonText) {
      showError(jsonError!, 'Please enter a valid JSON');
      return;
    }

    try {
      const jsonData = JSON.parse(jsonText);
      jsonInput.value = JSON.stringify(jsonData, null, 2);
    } catch (error) {
      showError(jsonError!, `Error formatting: ${error instanceof Error ? error.message : 'Invalid JSON'}`);
    }
  }

  function updateTokenComparison(jsonText: string, toonText: string) {
    if (!jsonText || !toonText) {
      hideTokenComparison();
      return;
    }

    try {
      const comparison = compareTokens(jsonText, toonText);
      
      if (tokenComparisonMini && jsonTokensMini && toonTokensMini && savingsMini) {
        tokenComparisonMini.classList.remove('hidden');
        
        jsonTokensMini.textContent = comparison.json.toLocaleString();
        toonTokensMini.textContent = comparison.toon.toLocaleString();
        
        const savingsText = comparison.savingsPercent > 0 
          ? `(-${comparison.savingsPercent.toFixed(1)}%)`
          : `(+${Math.abs(comparison.savingsPercent).toFixed(1)}%)`;
        savingsMini.textContent = savingsText;
        
        // Update color based on savings
        if (comparison.savingsPercent > 0) {
          savingsMini.classList.remove('text-red-600');
          savingsMini.classList.add('text-emerald-600');
        } else {
          savingsMini.classList.remove('text-emerald-600');
          savingsMini.classList.add('text-red-600');
        }
      }
    } catch (error) {
      console.error('Error updating token comparison:', error);
      hideTokenComparison();
    }
  }

  function hideTokenComparison() {
    if (tokenComparisonMini) {
      tokenComparisonMini.classList.add('hidden');
    }
  }

  function copyToClipboard(text: string, button: HTMLButtonElement) {
    navigator.clipboard.writeText(text).then(() => {
      // Show temporary feedback
      const originalText = button.textContent;
      button.textContent = '✓ Copied';
      button.classList.add('bg-green-100', 'text-green-700');
      setTimeout(() => {
        button.textContent = originalText;
        button.classList.remove('bg-green-100', 'text-green-700');
      }, 2000);
    }).catch(err => {
      console.error('Error copying:', err);
    });
  }

  // Event listeners
  document.getElementById('json-to-toon-btn')?.addEventListener('click', convertJsonToToon);
  document.getElementById('toon-to-json-btn')?.addEventListener('click', convertToonToJson);
  document.getElementById('json-format-btn')?.addEventListener('click', formatJson);
  document.getElementById('json-copy-btn')?.addEventListener('click', (e) => {
    copyToClipboard(jsonInput.value, e.target as HTMLButtonElement);
  });
  document.getElementById('json-clear-btn')?.addEventListener('click', () => {
    jsonInput.value = '';
    hideError(jsonError!);
  });
  document.getElementById('toon-clear-btn')?.addEventListener('click', () => {
    toonOutput.value = '';
    hideError(toonError!);
  });
  document.getElementById('toon-copy-btn')?.addEventListener('click', (e) => {
    copyToClipboard(toonOutput.value, e.target as HTMLButtonElement);
  });
  // Auto-convert on JSON input change (debounced)
  let jsonTimeout: ReturnType<typeof setTimeout>;
  jsonInput.addEventListener('input', () => {
    clearTimeout(jsonTimeout);
    jsonTimeout = setTimeout(() => {
      if (jsonInput.value.trim()) {
        convertJsonToToon();
      }
    }, 500);
  });

  // Example JSON on load
  window.addEventListener('load', () => {
    const exampleJson = {
      users: [
        { id: 1, name: 'Alice', role: 'admin', tags: ['reading', 'gaming'] },
        { id: 2, name: 'Bob', role: 'user', tags: ['coding'] }
      ],
      metadata: {
        total: 2,
        timestamp: new Date().toISOString()
      }
    };
    jsonInput.value = JSON.stringify(exampleJson, null, 2);
    convertJsonToToon();
  });
</script>

